{"version":3,"file":"static/js/722.43371936.chunk.js","mappings":"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","sources":["simulations/boids/components/cmp_acceleration.js","simulations/boids/components/cmp_boid.js","simulations/boids/components/cmp_draw.js","simulations/boids/components/cmp_position.js","simulations/boids/components/cmp_velocity.js","simulations/boids/entities/ent_boid.js","simulations/boids/entities/entityManager.js","simulations/boids/main.js","simulations/boids/systems/sys_boid.js","simulations/boids/systems/sys_draw.js","simulations/boids/systems/sys_movement.js"],"sourcesContent":["export function AccelerationComponent(x = 0, y = 0) {\r\n    return {\r\n        x,\r\n        y,\r\n    };\r\n}\r\n","export function BoidComponent() {\r\n    return {\r\n        maxSpeed: 4,\r\n        minSpeed: 3,\r\n        turnFactor: 0.2,\r\n        visualRange: 40,\r\n        protectedRange: 8,\r\n    };\r\n}\r\n","export function DrawComponent(color = 'black', size = 5, shape = 'circle') {\r\n    return {\r\n        color,\r\n        size,\r\n        shape,\r\n    };\r\n}\r\n","export function PositionComponent(x = 0, y = 0) {\r\n    return {\r\n        x,\r\n        y,\r\n    };\r\n}\r\n","export function VelocityComponent(x = 0, y = 0) {\r\n    return {\r\n        x,\r\n        y,\r\n    };\r\n}\r\n","import { BoidComponent } from \"../components/cmp_boid.js\";\r\nimport { PositionComponent } from \"../components/cmp_position.js\";\r\nimport { VelocityComponent } from \"../components/cmp_velocity.js\";\r\nimport { AccelerationComponent } from \"../components/cmp_acceleration.js\";\r\nimport { DrawComponent } from \"../components/cmp_draw.js\";\r\nexport class BoidEntity {\r\n    constructor(entityManager, x, y) {\r\n        this.entityId = entityManager.createEntity();\r\n        entityManager.addComponent(this.entityId, 'Boid', BoidComponent());\r\n        entityManager.addComponent(this.entityId, 'Position', PositionComponent(x, y));\r\n        entityManager.addComponent(this.entityId, 'Velocity', VelocityComponent());\r\n        entityManager.addComponent(this.entityId, 'Acceleration', AccelerationComponent());\r\n        entityManager.addComponent(this.entityId, 'Draw', DrawComponent('white', 5, 'triangle'));\r\n    }\r\n}\r\n","export class EntityManager {\r\n    constructor() {\r\n        this.entities = new Map();\r\n        this.nextEntityId = 0;\r\n    }\r\n    createEntity() {\r\n        const entityId = this.nextEntityId++;\r\n        this.entities.set(entityId, new Map());\r\n        return entityId;\r\n    }\r\n    addComponent(entityId, componentName, component) {\r\n        const entity = this.entities.get(entityId);\r\n        if (entity) {\r\n            entity.set(componentName, component);\r\n        }\r\n    }\r\n    getComponent(entityId, componentName) {\r\n        const entity = this.entities.get(entityId);\r\n        return entity ? entity.get(componentName) : undefined;\r\n    }\r\n    getEntities() {\r\n        return this.entities;\r\n    }\r\n}\r\n","import { EntityManager } from './entities/entityManager.js';\r\nimport { BoidEntity } from './entities/ent_boid.js';\r\nimport { BoidSystem } from './systems/sys_boid.js';\r\nimport { MovementSystem } from './systems/sys_movement.js';\r\nimport { DrawSystem } from './systems/sys_draw.js';\r\nlet entityManager;\r\nlet boidSystem;\r\nlet movementSystem;\r\nlet drawSystem;\r\nlet canvaswidth;\r\nlet canvasheight;\r\nfunction init(context, num) {\r\n    canvaswidth = context.canvas.width;\r\n    canvasheight = context.canvas.height\r\n    entityManager = new EntityManager();\r\n    boidSystem = new BoidSystem(entityManager,canvaswidth,canvasheight);\r\n    movementSystem = new MovementSystem();\r\n    drawSystem = new DrawSystem(context);;\r\n    for (let i = 0; i < num; i++) {\r\n        const boidEntity = new BoidEntity(entityManager, Math.random() * canvaswidth, Math.random() * canvasheight);\r\n    }\r\n}\r\nlet lastTime = 0;\r\nconst fps = 60;\r\nconst interval = 1000 / fps;\r\nlet delta = 0;\r\n\r\nfunction gameLoop(timestamp) {\r\n    if (!lastTime) lastTime = timestamp;\r\n    delta += timestamp - lastTime;\r\n    lastTime = timestamp;\r\n\r\n\r\n    while (delta >= interval) {\r\n        boidSystem.update();\r\n        movementSystem.update(entityManager, canvaswidth, canvasheight);\r\n        delta -= interval;\r\n    }\r\n\r\n    drawSystem.update(entityManager);\r\n    requestAnimationFrame(gameLoop);\r\n}\r\nexport { init, gameLoop };\r\n","export class BoidSystem {\r\n    constructor(entityManager,canvaswidth,canvasheight) {\r\n        this.entityManager = entityManager;\r\n        this.boidParams = {\r\n            separationFactor: 0.05,\r\n            alignmentFactor: 0.05,\r\n            centeringFactor: 0.0005,\r\n        };\r\n        this.canvaswidth = canvaswidth;\r\n        this.canvasheight = canvasheight;\r\n    }\r\n    update() {\r\n        const entities = this.entityManager.getEntities();\r\n        entities.forEach((components, entityId) => {\r\n            const boid = components.get('Boid');\r\n            const position = components.get('Position');\r\n            const velocity = components.get('Velocity');\r\n            const acceleration = components.get('Acceleration');\r\n            if (boid && position && velocity && acceleration) {\r\n                this.applyupdate(entityId, position, velocity, boid, acceleration);\r\n                this.applySeparation(entityId, position, velocity, boid);\r\n                this.applyAlignment(entityId, position, velocity, boid);\r\n                this.applyCentering(entityId, position, velocity, boid);\r\n            }\r\n        });\r\n    }\r\n    applyupdate(entityId, position, velocity, boid, acceleration) {\r\n        //console.log(velocity)\r\n        velocity.x += acceleration.x;\r\n        velocity.y += acceleration.y;\r\n        const speed = Math.sqrt(Math.pow(velocity.x, 2) + Math.pow(velocity.y, 2));\r\n        if (speed > boid.maxSpeed) {\r\n            velocity.x = (velocity.x / speed) * boid.maxSpeed;\r\n            velocity.y = (velocity.y / speed) * boid.maxSpeed;\r\n        }\r\n        else if (speed < boid.minSpeed && speed !== 0) {\r\n            velocity.x = (velocity.x / speed) * boid.minSpeed;\r\n            velocity.y = (velocity.y / speed) * boid.minSpeed;\r\n        }\r\n        else if (speed === 0) {\r\n            velocity.x = boid.minSpeed;\r\n            velocity.y = boid.minSpeed;\r\n        }\r\n\r\n        if (position.x <  this.canvaswidth)\r\n            velocity.x += boid.turnFactor;\r\n        if (position.x > 0)\r\n            velocity.x -= boid.turnFactor;\r\n        if (position.y < this.canvasheight)\r\n            velocity.y += boid.turnFactor;\r\n        if (position.y > 0)\r\n            velocity.y -= boid.turnFactor;\r\n        acceleration.x = 0;\r\n        acceleration.y = 0;\r\n    }\r\n    applySeparation(entityId, position, velocity, boid) {\r\n        const entities = this.entityManager.getEntities();\r\n        let close = { dx: 0, dy: 0 };\r\n        entities.forEach((otherComponents, otherEntityId) => {\r\n            if (entityId !== otherEntityId) {\r\n                const otherPosition = otherComponents.get('Position');\r\n                const otherBoid = otherComponents.get('Boid');\r\n                if (otherPosition && otherBoid) {\r\n                    const distance = Math.sqrt(Math.pow((position.x - otherPosition.x), 2) + Math.pow((position.y - otherPosition.y), 2));\r\n                    if (distance < boid.protectedRange && distance > 0) {\r\n                        close.dx += position.x - otherPosition.x;\r\n                        close.dy += position.y - otherPosition.y;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        velocity.x += close.dx * this.boidParams.separationFactor;\r\n        velocity.y += close.dy * this.boidParams.separationFactor;\r\n    }\r\n    applyAlignment(entityId, position, velocity, boid) {\r\n        let xvel_avg = 0;\r\n        let yvel_avg = 0;\r\n        let neighboring_boids = 0;\r\n        const entities = this.entityManager.getEntities();\r\n        entities.forEach((otherComponents, otherEntityId) => {\r\n            if (entityId !== otherEntityId) {\r\n                const otherPosition = otherComponents.get('Position');\r\n                const otherBoid = otherComponents.get('Boid');\r\n                const otherVelocity = otherComponents.get('Velocity');\r\n                if (otherPosition && otherBoid && otherVelocity) {\r\n                    const distance = Math.sqrt(Math.pow((position.x - otherPosition.x), 2) + Math.pow((position.y - otherPosition.y), 2));\r\n                    if (distance < boid.visualRange && distance > 0) {\r\n                        xvel_avg += otherVelocity.x;\r\n                        yvel_avg += otherVelocity.y;\r\n                        neighboring_boids++;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        if (neighboring_boids > 0) {\r\n            xvel_avg /= neighboring_boids;\r\n            yvel_avg /= neighboring_boids;\r\n        }\r\n        velocity.x += (xvel_avg - velocity.x) * this.boidParams.alignmentFactor;\r\n        velocity.y += (yvel_avg - velocity.y) * this.boidParams.alignmentFactor;\r\n    }\r\n    applyCentering(entityId, position, velocity, boid) {\r\n        let xpos_avg = 0;\r\n        let ypos_avg = 0;\r\n        let neighboring_boids = 0;\r\n        const entities = this.entityManager.getEntities();\r\n        entities.forEach((otherComponents, otherEntityId) => {\r\n            if (entityId !== otherEntityId) {\r\n                const otherPosition = otherComponents.get('Position');\r\n                const otherBoid = otherComponents.get('Boid');\r\n                if (otherPosition && otherBoid) {\r\n                    const distance = Math.sqrt(Math.pow((position.x - otherPosition.x), 2) + Math.pow((position.y - otherPosition.y), 2));\r\n                    if (distance < boid.visualRange && distance > 0) {\r\n                        xpos_avg += otherPosition.x;\r\n                        ypos_avg += otherPosition.y;\r\n                        neighboring_boids++;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        if (neighboring_boids > 0) {\r\n            xpos_avg /= neighboring_boids;\r\n            ypos_avg /= neighboring_boids;\r\n        }\r\n        velocity.x += (xpos_avg - position.x) * this.boidParams.centeringFactor;\r\n        velocity.y += (ypos_avg - position.y) * this.boidParams.centeringFactor;\r\n    }\r\n}\r\n","export class DrawSystem {\r\n    constructor(context) {\r\n        this.context = context;\r\n    }\r\n    update(entityManager) {\r\n        const entities = entityManager.getEntities();\r\n        this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height);\r\n        entities.forEach((components, entityId) => {\r\n            const position = components.get('Position');\r\n            const draw = components.get('Draw');\r\n            const velocity = components.get('Velocity');\r\n            if (position && draw && velocity) {\r\n                this.context.fillStyle = draw.color;\r\n                this.context.beginPath();\r\n                if (draw.shape === 'circle') {\r\n                    this.context.arc(position.x, position.y, draw.size, 0, Math.PI * 2);\r\n                }\r\n                else if (draw.shape === 'square') {\r\n                    this.context.rect(position.x - draw.size / 2, position.y - draw.size / 2, draw.size, draw.size);\r\n                }\r\n                else if (draw.shape === 'triangle') {\r\n                    const angle = Math.atan2(velocity.y, velocity.x);\r\n                    this.context.save();\r\n                    this.context.translate(position.x, position.y);\r\n                    this.context.rotate(angle);\r\n                    this.context.beginPath();\r\n                    this.context.moveTo(0, -draw.size);\r\n                    this.context.lineTo(-draw.size, draw.size);\r\n                    this.context.lineTo(draw.size * 2, draw.size);\r\n                    this.context.closePath();\r\n                    this.context.restore();\r\n                }\r\n                this.context.fill();\r\n            }\r\n        });\r\n    }\r\n}\r\n","export class MovementSystem {\r\n    update(entityManager, canvasWidth, canvasHeight) {\r\n        const entities = entityManager.getEntities();\r\n        entities.forEach((components, entityId) => {\r\n            const position = components.get('Position');\r\n            const velocity = components.get('Velocity');\r\n            if (position && velocity) {\r\n                position.x += velocity.x;\r\n                position.y += velocity.y;\r\n            }\r\n        });\r\n    }\r\n}\r\n"],"names":["AccelerationComponent","x","arguments","length","undefined","y","BoidComponent","maxSpeed","minSpeed","turnFactor","visualRange","protectedRange","DrawComponent","color","size","shape","PositionComponent","VelocityComponent","BoidEntity","constructor","entityManager","this","entityId","createEntity","addComponent","EntityManager","entities","Map","nextEntityId","set","componentName","component","entity","get","getComponent","getEntities","boidSystem","movementSystem","drawSystem","canvaswidth","canvasheight","init","context","num","canvas","width","height","BoidSystem","MovementSystem","DrawSystem","i","Math","random","lastTime","interval","delta","gameLoop","timestamp","update","requestAnimationFrame","boidParams","separationFactor","alignmentFactor","centeringFactor","forEach","components","boid","position","velocity","acceleration","applyupdate","applySeparation","applyAlignment","applyCentering","speed","sqrt","pow","close","dx","dy","otherComponents","otherEntityId","otherPosition","otherBoid","distance","xvel_avg","yvel_avg","neighboring_boids","otherVelocity","xpos_avg","ypos_avg","clearRect","draw","fillStyle","beginPath","arc","PI","rect","angle","atan2","save","translate","rotate","moveTo","lineTo","closePath","restore","fill","canvasWidth","canvasHeight"],"sourceRoot":""}
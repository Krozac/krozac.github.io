{"version":3,"file":"static/js/708.c22bf0b6.chunk.js","mappings":"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","sources":["simulations/boids/systems/sys_boid.js"],"sourcesContent":["export class BoidSystem {\r\n    constructor(entityManager,canvaswidth,canvasheight) {\r\n        this.entityManager = entityManager;\r\n        this.boidParams = {\r\n            separationFactor: 0.05,\r\n            alignmentFactor: 0.05,\r\n            centeringFactor: 0.0005,\r\n        };\r\n        this.canvaswidth = canvaswidth;\r\n        this.canvasheight = canvasheight;\r\n    }\r\n    update() {\r\n        const entities = this.entityManager.getEntities();\r\n        entities.forEach((components, entityId) => {\r\n            const boid = components.get('Boid');\r\n            const position = components.get('Position');\r\n            const velocity = components.get('Velocity');\r\n            const acceleration = components.get('Acceleration');\r\n            if (boid && position && velocity && acceleration) {\r\n                this.applyupdate(entityId, position, velocity, boid, acceleration);\r\n                this.applySeparation(entityId, position, velocity, boid);\r\n                this.applyAlignment(entityId, position, velocity, boid);\r\n                this.applyCentering(entityId, position, velocity, boid);\r\n            }\r\n        });\r\n    }\r\n    applyupdate(entityId, position, velocity, boid, acceleration) {\r\n        //console.log(velocity)\r\n        velocity.x += acceleration.x;\r\n        velocity.y += acceleration.y;\r\n        const speed = Math.sqrt(Math.pow(velocity.x, 2) + Math.pow(velocity.y, 2));\r\n        if (speed > boid.maxSpeed) {\r\n            velocity.x = (velocity.x / speed) * boid.maxSpeed;\r\n            velocity.y = (velocity.y / speed) * boid.maxSpeed;\r\n        }\r\n        else if (speed < boid.minSpeed && speed !== 0) {\r\n            velocity.x = (velocity.x / speed) * boid.minSpeed;\r\n            velocity.y = (velocity.y / speed) * boid.minSpeed;\r\n        }\r\n        else if (speed === 0) {\r\n            velocity.x = boid.minSpeed;\r\n            velocity.y = boid.minSpeed;\r\n        }\r\n\r\n        if (position.x <  this.canvaswidth)\r\n            velocity.x += boid.turnFactor;\r\n        if (position.x > 0)\r\n            velocity.x -= boid.turnFactor;\r\n        if (position.y < this.canvasheight)\r\n            velocity.y += boid.turnFactor;\r\n        if (position.y > 0)\r\n            velocity.y -= boid.turnFactor;\r\n        acceleration.x = 0;\r\n        acceleration.y = 0;\r\n    }\r\n    applySeparation(entityId, position, velocity, boid) {\r\n        const entities = this.entityManager.getEntities();\r\n        let close = { dx: 0, dy: 0 };\r\n        entities.forEach((otherComponents, otherEntityId) => {\r\n            if (entityId !== otherEntityId) {\r\n                const otherPosition = otherComponents.get('Position');\r\n                const otherBoid = otherComponents.get('Boid');\r\n                if (otherPosition && otherBoid) {\r\n                    const distance = Math.sqrt(Math.pow((position.x - otherPosition.x), 2) + Math.pow((position.y - otherPosition.y), 2));\r\n                    if (distance < boid.protectedRange && distance > 0) {\r\n                        close.dx += position.x - otherPosition.x;\r\n                        close.dy += position.y - otherPosition.y;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        velocity.x += close.dx * this.boidParams.separationFactor;\r\n        velocity.y += close.dy * this.boidParams.separationFactor;\r\n    }\r\n    applyAlignment(entityId, position, velocity, boid) {\r\n        let xvel_avg = 0;\r\n        let yvel_avg = 0;\r\n        let neighboring_boids = 0;\r\n        const entities = this.entityManager.getEntities();\r\n        entities.forEach((otherComponents, otherEntityId) => {\r\n            if (entityId !== otherEntityId) {\r\n                const otherPosition = otherComponents.get('Position');\r\n                const otherBoid = otherComponents.get('Boid');\r\n                const otherVelocity = otherComponents.get('Velocity');\r\n                if (otherPosition && otherBoid && otherVelocity) {\r\n                    const distance = Math.sqrt(Math.pow((position.x - otherPosition.x), 2) + Math.pow((position.y - otherPosition.y), 2));\r\n                    if (distance < boid.visualRange && distance > 0) {\r\n                        xvel_avg += otherVelocity.x;\r\n                        yvel_avg += otherVelocity.y;\r\n                        neighboring_boids++;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        if (neighboring_boids > 0) {\r\n            xvel_avg /= neighboring_boids;\r\n            yvel_avg /= neighboring_boids;\r\n        }\r\n        velocity.x += (xvel_avg - velocity.x) * this.boidParams.alignmentFactor;\r\n        velocity.y += (yvel_avg - velocity.y) * this.boidParams.alignmentFactor;\r\n    }\r\n    applyCentering(entityId, position, velocity, boid) {\r\n        let xpos_avg = 0;\r\n        let ypos_avg = 0;\r\n        let neighboring_boids = 0;\r\n        const entities = this.entityManager.getEntities();\r\n        entities.forEach((otherComponents, otherEntityId) => {\r\n            if (entityId !== otherEntityId) {\r\n                const otherPosition = otherComponents.get('Position');\r\n                const otherBoid = otherComponents.get('Boid');\r\n                if (otherPosition && otherBoid) {\r\n                    const distance = Math.sqrt(Math.pow((position.x - otherPosition.x), 2) + Math.pow((position.y - otherPosition.y), 2));\r\n                    if (distance < boid.visualRange && distance > 0) {\r\n                        xpos_avg += otherPosition.x;\r\n                        ypos_avg += otherPosition.y;\r\n                        neighboring_boids++;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        if (neighboring_boids > 0) {\r\n            xpos_avg /= neighboring_boids;\r\n            ypos_avg /= neighboring_boids;\r\n        }\r\n        velocity.x += (xpos_avg - position.x) * this.boidParams.centeringFactor;\r\n        velocity.y += (ypos_avg - position.y) * this.boidParams.centeringFactor;\r\n    }\r\n}\r\n"],"names":["BoidSystem","constructor","entityManager","canvaswidth","canvasheight","this","boidParams","separationFactor","alignmentFactor","centeringFactor","update","getEntities","forEach","components","entityId","boid","get","position","velocity","acceleration","applyupdate","applySeparation","applyAlignment","applyCentering","x","y","speed","Math","sqrt","pow","maxSpeed","minSpeed","turnFactor","entities","close","dx","dy","otherComponents","otherEntityId","otherPosition","otherBoid","distance","protectedRange","xvel_avg","yvel_avg","neighboring_boids","otherVelocity","visualRange","xpos_avg","ypos_avg"],"sourceRoot":""}